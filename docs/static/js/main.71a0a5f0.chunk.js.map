{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","image","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"qMAIaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACZC,mBAAS,IADG,mBACzCC,EADyC,KAC7BC,EAD6B,KAehD,OACI,0BAAMC,SATW,SAAEC,GACrBA,EAAEC,iBACGJ,EAAWK,OAAOC,OAAS,IAC9BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,OAMZ,2BACEO,KAAK,OACLC,MAAQT,EACRU,SAjBkB,SAAEP,GAC1BF,EAAcE,EAAEQ,OAAOF,Y,uBCPdG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EAAO,0CAA4CC,UAAUH,GAAY,qDAD5D,SAEAI,MAAOF,GAFP,cAEbG,EAFa,gBAGIA,EAAKC,OAHT,uBAGXC,EAHW,EAGXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC5B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATnB,kBAaZM,GAbY,4CAAH,sDCCPO,EAAc,SAAC,GAAyB,EAAtBJ,GAAuB,IAAnBC,EAAkB,EAAlBA,MAAOV,EAAW,EAAXA,IACxC,OACE,yBAAKc,UAAU,4DACb,yBAAKC,IAAMf,EAAMgB,IAAKN,IACtB,+BAAMA,EAAN,OCAOO,EAAU,SAAC,GAAmB,IAAhBnB,EAAe,EAAfA,SAAe,ECFd,SAAEA,GAAe,IAAD,EAEhBd,mBAAS,CACjCqB,KAAM,GACNa,SAAS,IAJ+B,mBAEnCC,EAFmC,KAE5BC,EAF4B,KAmB1C,OAVCC,qBAAW,WACVxB,EAAQC,GACLwB,MAAM,SAAAC,GACLH,EAAS,CACPf,KAAMkB,EACNL,SAAS,SAGd,CAAEpB,IAEEqB,EDf0BK,CAAc1B,GAAlCa,EAF2B,EAEhCN,KAAaa,EAFmB,EAEnBA,QAErB,OACE,oCACE,wBAAIJ,UAAU,qCAAd,IAAqDhB,EAArD,KAECoB,GAAW,uBAAGJ,UAAU,oCAAb,YACZ,yBAAKA,UAAU,aACTH,EAAOJ,KACP,SAAAkB,GAAK,OACH,kBAAC,EAAD,eACEC,IAAMD,EAAMhB,IACRgB,UESLE,EAzBM,WAAO,IAAD,EAEW3C,mBAAS,CAAC,YAFrB,mBAElB4C,EAFkB,KAEN7C,EAFM,KAQzB,OAAQ,oCACN,4CACA,kBAAC,EAAD,CAAaA,cAAgBA,IAC7B,6BAEA,4BAEI6C,EAAWrB,KAAK,SAAAT,GAAQ,OACtB,kBAAC,EAAD,CACE4B,IAAO5B,EACPA,SAAWA,U,MCfvB+B,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.71a0a5f0.chunk.js","sourcesContent":["\nimport React, { useState } from 'react'\nimport PropTypes from \"prop-types\";\n\nexport const AddCategory = ({ setCategories }) => {\n  const [inputValue, setInputValue] = useState('');\n\n  const handleInputChange = ( e ) => {\n    setInputValue(e.target.value);\n  };\n\n  const handleSubmit = ( e ) => {\n    e.preventDefault();\n    if ( inputValue.trim().length > 2 ) {\n      setCategories(cats => [inputValue, ...cats ]);\n      setInputValue('') ;\n    }\n  }\n\n  return (\n      <form onSubmit={ handleSubmit }>\n        <input \n          type=\"text\"\n          value={ inputValue }\n          onChange={ handleInputChange }\n          />\n      </form>\n  )\n}\n\nAddCategory.propTypes = {\n  setCategories: PropTypes.func.isRequired\n}","\nexport const getGifs = async( category ) => {\n    const url  = 'https://api.giphy.com/v1/gifs/search?q=' + encodeURI(category) + '&limit=10&api_key=JvkYxQ3A8vPApj4Q6X1wVLdLoiTZ5OY7';\n    const resp = await fetch( url );\n    const { data } = await resp.json();\n\n    const gifs = data.map( img => {\n      return {\n        id: img.id,\n        title: img.title,\n        url: img.images?.downsized_medium.url\n      }\n    });\n\n    return gifs;\n  }","import React from 'react'\n\nexport const GifGridItem = ( { id, title, url } ) => {\n  return (\n    <div className=\"card animate__animated animate__fadeIn animate__delay-1s\">\n      <img src={ url } alt={title} />\n      <p> { title } </p>\n    </div>\n  )\n};\n","\nimport React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs'\nimport { GifGridItem } from './GifGridItem';\n\n\nexport const GifGrid = ( { category }) => {\n  \n  const { data:images, loading } = useFetchGifs( category );\n\n  return (\n    <>\n      <h3 className=\"animate__animated animate__fadeIn\"> { category } </h3>\n      \n      {loading && <p className=\"animate__animated animate__flash\">Loadding</p> }\n      <div className=\"card-grid\">\n          { images.map(\n            image =>  \n              <GifGridItem \n                key={ image.id } \n                {...image} />   // Los tres puntos es para indicar \n                                // que los key del objeto se pasan\n                                // como parametros o props del componente\n          )}\n      </div>\n    </>\n  )\n}\n","\nimport { useState, useEffect } from 'react';\nimport { getGifs } from \"../helpers/getGifs\";\n\nexport const useFetchGifs = ( category ) => {\n\n  const [state, setState] = useState({\n    data: [],\n    loading: true\n  });\n\n\n  // // se ejecuta cuando el componente es rederizado por primera vez\n   useEffect( () => {\n    getGifs(category)\n      .then( imgs => {\n        setState({\n          data: imgs,\n          loading: false\n        });\n      } );\n  }, [ category ])\n\n  return state; // { data: [], loading: true};\n};\n","import React, { useState } from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nconst GifExpertApp = () => {\n\n  const [categories, setCategories] = useState(['Chanfle']);\n\n  // const handleAdd = () => {\n  //   // ( [...categories, 'Miss'] );\n  //   setCategories( cats => [...cats, 'Miss'] );\n  // }\n  return (<>\n    <h2>GifExpertApp</h2>\n    <AddCategory setCategories={ setCategories } />\n    <hr />\n\n    <ol>\n      { \n        categories.map( category => \n          <GifGrid \n            key= { category }\n            category={ category } />\n        )\n      }\n    </ol>\n  </>);\n}\n\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport GifExpertApp from './GifExpertApp';\n\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}